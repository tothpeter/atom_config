# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

# JavaScript -----------------------------
'.source.js':
  "anonymous function":
    prefix: "f"
    body: """function(${1:arguments}) {
      ${0}
    }"""
  "self invoke anonymous function":
    prefix: "siaf"
    body: """+function(){
      $0
    }();"""
  "$('#')":
    prefix: "$"
    body: "$('${2:#}')"
  "return":
    prefix: "ret"
    body: "return ${1:{$2\\}};"
  "return object":
    prefix: "reto"
    body: "return {$1\\};"
  "return false":
    prefix: "retf"
    body: "return false;"
  "return true":
    prefix: "rett"
    body: "return true;"
  # ----------------------------- Angular
  "$scope":
    prefix: "sc"
    body: "$scope${1:.}"
  "$stateProvider config":
    prefix: "stpc"
    body: """$stateProvider
      .state('$1', {
        url: '$2',
        views: {
          '$3': {
            templateUrl: '$4',
            controller: '$5'
          }
        }
      });"""

'string.quoted.template.js':
  "${$0}":
    prefix: "$"
    body: "${$0}"

# HAML -----------------------------
'.text.haml':
  "each":
    prefix: "each"
    body:  """- @$1s.each do |$1|
  = $1.
  $0"""

  "image_tag":
    prefix: "it"
    body:  "= image_tag '$1'${3:, ${4:class: '$5'}}"

  "linkt_to":
    prefix: "lt"
    body:  "= link_to '$1', '${2:#}'${3:, class: '$4'}"

  "if":
    prefix: "if"
    body:  "- if "
  "if else":
    prefix: "ife"
    body:  """
      - if $1
        $0
      - else
    """

# Ruby -----------------------------
'.source.ruby, .source.ruby.rails, .meta.rails.controller, .meta.rails.model':
  "Ruby puts separator":
    prefix: "p"
    body: "p \"-----------------------------------------\""

  "params[:id]":
    prefix: "pa"
    body: "params[${1::id}]"

  '.each do |item| ... end':
    prefix: 'each'
    body: """each do |${1:item}|
      ${0}
    end"""

'.source.ruby.rails, .meta.rails.controller, .meta.rails.model':
  "Rails.logger.error '--'":
    prefix: "le"
    body: "Rails.logger.error \"-----------------------------------------\""

  "Rails.logger.info '--'":
    prefix: "l"
    body: "Rails.logger.info \"-----------------------------------------\""

# Handlebars -----------------------------
'.text.html.handlebars':
  '#each model as |item|':
    prefix: 'each'
    body: """{{#each ${1:model} as |${2:item}|}}
      ${0}
    {{/each}}"""

  '{{action }}':
    prefix: 'action'
    body: '{{action "${1}"}}'

  '{{#link-to $1}}$0{{/link-to}}':
    prefix: 'linkto'
    body: '{{#link-to "${1:route}"}}$0{{/link-to}}'

  '{{link-to }}':
    prefix: 'linkto2'
    body: '{{link-to "${1:text}" "${2:route}"}}'

# Elixir -----------------------------
'.source.elixir':
  'IO.puts "-----"':
    prefix: 'le'
    body: "IO.puts \"----------------------\""
  'IO.puts "-----"':
    prefix: 'p'
    body: "IO.puts \"----------------------\""
  'IO.inspect':
    prefix: 'i'
    body: "IO.inspect "
  'defmodule':
    prefix: 'defm'
    body: 'defmodule $1 do\n\t$0\nend'

  'def inline':
    prefix: 'defi'
    body: "def ${1}(${2}), do: ${0}"
  'if else':
    prefix: 'ife'
    body: """
      if $1 do
        $2
      else
        $3
      end
    """
  'def inline':
    prefix: 'defi'
    body: 'def $1($2), do: $0'
  '=> ':
    prefix: '='
    body: "=> "
  'Map':
    prefix: '%'
    body: '%{$0}'
  'Pipe':
    prefix: '|'
    body: '|> '
  'function':
    prefix: '&'
    body: '&()'
  'for inline':
    prefix: 'fori'
    body: 'for $1 <- $2, do: $0'
  'arrow':
    prefix: '-'
    body: '-> '

".erb":
# Original
  "each":
    prefix: "each"
    body:  """- @$1s.each do |$1|
  = $1.
  $0"""

  "image_tag":
    prefix: "it"
    body:  "<%= image_tag '$1'${3:, ${4:class: '$5'}}%>"

  "linkt_to":
    prefix: "lt"
    body:  "<%= link_to '$1', '${2:#}'${3:, class: '$4'}%>"


# Original ERB Package
  "if block":
    prefix: "if"
    body: """
      <% if ${1:condition} %>
        ${2:true-block}
      <% end %>
    """
  "if/else block":
    prefix: "ife"
    body: """
      <% if ${1:condition} %>
        ${2:true-block}
      <% else %>
        ${3:false-block}
      <% end %>
    """
  "else tag":
    prefix: "else"
    body: "<% else %>"
  "elsif tag":
    prefix: "elsif"
    body: "<% elsif ${1:condition} %>"
  "unless block":
    prefix: "unless"
    body: """
      <% unless ${1:condition} %>
        ${2:false-block}
      <% end %>
    """
  "end tag":
    prefix: "end"
    body: "<% end %>"
